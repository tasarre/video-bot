import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { GenerateContentRequest, GenerateContentResponse } from '@/types';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  console.log('ü§ñ G√©n√©ration de contenu demand√©e');
  
  try {
    const body: GenerateContentRequest = await request.json();
    console.log('Donn√©es re√ßues:', body);
    
    const { prompt, videoType, duration, tone } = body;

    if (!prompt) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Prompt requis' 
        },
        { status: 400 }
      );
    }

    // Si pas de cl√© OpenAI, retourner un script de test
    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ö†Ô∏è  Pas de cl√© OpenAI, script de test');
      
      const hooks = {
        '√âducatif': `üéì Saviez-vous que ${prompt} peut r√©volutionner votre apprentissage ?`,
        'Divertissement': `üéâ Vous ne devinerez jamais ce que ${prompt} peut faire !`,
        'Storytelling': `üìñ Il √©tait une fois... ${prompt} qui a tout chang√©`,
        'Viral': `üî• Cette astuce sur ${prompt} va vous choquer !`,
        'Review': `‚≠ê Mon avis honn√™te sur ${prompt} apr√®s l'avoir test√©`,
        'Motivation': `üí™ Comment ${prompt} peut transformer votre vie d√®s aujourd'hui`
      };

      const ctas = {
        'D√©contract√©': 'Likez si √ßa vous a plu ! üëç',
        'Professionnel': 'Partagez votre exp√©rience en commentaire.',
        '√ânergique': 'LIKEZ ET PARTAGEZ MAINTENANT ! üöÄ',
        'Calme': 'Prenez un moment pour r√©fl√©chir √† cela...'
      };

      const testScript = `${hooks[videoType as keyof typeof hooks] || hooks['√âducatif']}

üìù Voici les ${duration <= 30 ? '2' : '3'} points essentiels :

‚Ä¢ Point 1: La compr√©hension change tout
‚Ä¢ Point 2: L'action concr√®te fait la diff√©rence${duration > 30 ? '\n‚Ä¢ Point 3: La persistance garantit le succ√®s' : ''}

üéØ ${ctas[tone as keyof typeof ctas] || ctas['D√©contract√©']}`;

      const response: GenerateContentResponse = {
        success: true,
        script: testScript,
        metadata: {
          duration: duration || 60,
          tone: tone || 'D√©contract√©',
          type: videoType || '√âducatif',
          wordCount: testScript.split(' ').length,
          estimatedReadingTime: Math.ceil(testScript.split(' ').length / 150)
        }
      };

      return NextResponse.json(response);
    }

    // G√©n√©ration avec OpenAI
    const scriptPrompt = `Cr√©e un script viral de ${duration} secondes pour ${videoType} en fran√ßais.

Sujet: ${prompt}
Ton: ${tone}
Format: TikTok/YouTube Shorts

Structure obligatoire:
- Hook captivant (3 premi√®res secondes)
- Corps principal (points cl√©s, max 3)  
- Call-to-action final

Contraintes:
- Phrases courtes et punchy
- Langage simple et direct
- √âmotions fortes
- Optimis√© pour l'engagement
- Utilise des emojis appropri√©s

Script:`;

    const openaiResponse = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: scriptPrompt }],
      max_tokens: 500,
      temperature: 0.8
    });

    const generatedScript = openaiResponse.choices[0].message.content;
    
    if (!generatedScript) {
      throw new Error('Aucun script g√©n√©r√© par OpenAI');
    }
    
    console.log('‚úÖ Script g√©n√©r√© avec succ√®s');

    const response: GenerateContentResponse = {
      success: true,
      script: generatedScript,
      metadata: {
        duration: duration || 60,
        tone: tone || 'D√©contract√©',
        type: videoType || '√âducatif',
        wordCount: generatedScript.split(' ').length,
        estimatedReadingTime: Math.ceil(generatedScript.split(' ').length / 150)
      }
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration:', error);
    
    const errorResponse: GenerateContentResponse = {
      success: false,
      error: error instanceof Error ? error.message : 'Erreur lors de la g√©n√©ration'
    };

    return NextResponse.json(errorResponse, { status: 500 });
  }
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}